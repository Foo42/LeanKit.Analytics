@{
    Layout = "~/Views/Layouts/_Layout.cshtml";
}
@model LeanKit.ReleaseManager.Controllers.TicketViewModel

@if (string.IsNullOrWhiteSpace(Model.ExternalId))
{
    <h2>@Model.Title</h2>    
}
else
{
    <h2>@Model.ExternalId - @Model.Title</h2>    
}

<div class="right-hand-bar">
    <div class="right-hand-bar-section" id="ticket-activity-breakdown">
        <h3>Activity Breakdown</h3>
        <div>
            <div id="main-graph-holder"></div>
        </div>
        <ul class="activity-list">
            @foreach(var activity in Model.ActivityBreakdown.Activities)
            {
                <li class="waste-graph-activity @activity.ClassName" data-activity-class="@activity.ClassName">
                    <div class="legend-block"></div>
                    <span class="activity-name">@activity.Activity</span> - <span class="percent">@activity.FormattedPercent</span>%
                    <div class="activity-time-detail">@activity.TimeSummary</div>
                </li>
            }
        </ul>
    </div>
</div>

<div id="ticket-detail-summary">
    <div class="ticket-detail-summary-item">
        <h3>Status</h3>
        <div class="summary-current-text">
            <div class="summary-current-activity">Is currently @Model.CurrentStatus</div>
            @if (string.IsNullOrWhiteSpace(@Model.Started))
            {
                <div>Not started yet</div>
            }
            else
            {
                <div>Started @Model.Started</div>
            }
            @if (Model.IsCompleted)
            {
                <div>Released @Model.Finished</div>
            }
            else
            {
                <div>Not released yet</div>
            }
        </div>
    </div>
    <div class="ticket-detail-summary-item">
        <h3>Size</h3>
        <div class="ticket-summary-cycle-time-container">
            <span class="ticket-summary-cycle-time">@Model.Size</span>
        </div>
    </div>
    @if (Model.IsCompleted)
    {
        <div class="ticket-detail-summary-item">
            <h3>Cycle Time</h3>
            <div class="ticket-summary-cycle-time-container">
                <span class="ticket-summary-cycle-time">@Model.CycleTime</span><span class="ticket-summary-cycle-time-units"> day@(Model.CycleTime != 1 ? "s" : "")</span>
            </div>
        </div>
    }
    else
    {
        <div class="ticket-detail-summary-item ticket-detail-assigned-users-container">
            <h3>Assigned To</h3>
            <div class="ticket-detail-assigned-users@(
                Model.AssignedUsers.Count() <= 1 ? ""
                : Model.AssignedUsers.Count() == 2 ? " pairing" 
                : " multiple")">
                @if (!Model.AssignedUsers.Any())
                {
                    
                }
                
                @{
                    var x = 0;
                    foreach (var user in Model.AssignedUsers)
                    {
                        <div class="ticket-detail-assigned-user">
                            <div class="ticket-summary-assigned-to-gravatar">@Html.Gravatar(user.Email, Model.AssignedUsers.Count() == 1 ? 120 : 
                            Model.AssignedUsers.Count() == 2 ? 90 : 40)</div>
                            <div class="ticket-summary-assigned-to-container">@user.Name</div>
                        </div>
                        if (x == 0 && Model.AssignedUsers.Count() == 2)
                        {
                            <div class="ticket-detail-assigned-user-ampersand">&amp;</div>
                        }
                        x++;
                    }
                }
            </div>
        </div>
    }
    @if (Model.Contributors.Any())
    {
        <div class="ticket-detail-summary-item double-width" id="ticket-contributors">
            <h3>Contributors</h3>
            <ul class="ticket-contributors-list">
                @foreach (var contributor in Model.Contributors)
                {
                    <li class="ticket-contributors-list-item">
                        <div class="gravatar">@Html.Gravatar(contributor.Email, 60)</div>@contributor.Name (@contributor.Role)
                    </li>
                }
            </ul>
        </div>
    }
    <div class="ticket-detail-summary-item double-width">
        <h3>Blockages</h3>
        <ul class="ticket-blockages">
            @foreach(var blockage in Model.Blockages)
            {
                <li>@blockage.Reason</li>
            }
        </ul>
    </div>
</div>



@section JavaScript
{
<script type="text/javascript" src="/Assets/js/lib/d3.min.js"></script>
<script type="text/javascript">
    (function WasteGraph(element) {
        var width = 300,
            height = 300,
            radius = Math.min(width, height) / 2,
            data = $.map($('.waste-graph-activity'), function (item) {
                var activityElement = $(item);

                return {
                    className: activityElement.data('activityClass'),
                    activity: $('.activity-name', activityElement).text(),
                    percent: $('.percent', activityElement).text()
                };
            }),
            colors = {
                Developing: {
                    color: '#7FC9FF'
                },
                Testing: {
                    color: '#0094FF'
                },
                WaitingtoTest: {
                    color: '#FFC700'
                },
                WaitingtoRelease: {
                    color: '#C45200'
                },
                Blocked: {
                    color: '#C40000'
                }
            };

        var arc = d3.svg.arc()
            .outerRadius(radius - 10)
            .innerRadius(radius - 70);

        var pie = d3.layout.pie()
            .sort(null)
            .value(function (d) { return d.percent; });

        var svg = d3.select("#main-graph-holder").append("svg")
            .attr("width", width)
            .attr("height", height)
          .append("g")
            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

        $('.legend-block', element).css('background-color', function () {
            return colors[$(this).parent().data('activityClass')].color;
        });

        var g = svg.selectAll(".arc")
                  .data(pie(data))
                .enter().append("g")
                  .attr("class", "arc");

        g.append("path")
            .attr("d", arc)
            .style("fill", function (d) {
                return colors[d.data.className].color;
            });
    })($('#ticket-activity-breakdown'));
</script>
}
